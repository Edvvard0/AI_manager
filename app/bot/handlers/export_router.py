import os
import tempfile
from pathlib import Path
from aiogram import Router, F, Bot
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import aiohttp
import aiofiles
import asyncio

from app.chat_gpt.utils.export_chats import main
from app.database import async_session_maker

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
export_router = Router()


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class ExportStates(StatesGroup):
    waiting_for_html = State()


async def download_file_with_timeout(bot: Bot, file_path: str, destination: Path, timeout: int = 300):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º"""
    file_url = f"https://api.telegram.org/file/bot{bot.token}/{file_path}"

    async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=timeout)) as session:
        async with session.get(file_url) as response:
            response.raise_for_status()

            async with aiofiles.open(destination, 'wb') as f:
                async for chunk in response.content.iter_chunked(1024 * 1024):  # 1MB chunks
                    await f.write(chunk)


@export_router.message(Command("export_chats"))
async def command_export_chats(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /export_chats"""
    await message.answer("üìÅ –ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ —Ñ–∞–π–ª chat.html —Å —ç–∫—Å–ø–æ—Ä—Ç–æ–º —á–∞—Ç–æ–≤")
    await state.set_state(ExportStates.waiting_for_html)


@export_router.message(ExportStates.waiting_for_html, F.document)
async def handle_html_file(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ chat.html"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ HTML —Ñ–∞–π–ª
        if not message.document.file_name or not message.document.file_name.endswith(('.html', '.htm')):
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ HTML —Ñ–∞–π–ª (chat.html)")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        max_size = 100 * 1024 * 1024  # 100 –ú–ë
        if message.document.file_size > max_size:
            await message.answer("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 100 –ú–ë")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        file_id = message.document.file_id
        file = await bot.get_file(file_id)

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(delete=False, suffix='.html') as temp_file:
            temp_path = Path(temp_file.name)

        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
            await message.answer("‚è≥ –°–∫–∞—á–∏–≤–∞—é —Ñ–∞–π–ª...")

            await download_file_with_timeout(
                bot=bot,
                file_path=file.file_path,
                destination=temp_path,
                timeout=300  # 5 –º–∏–Ω—É—Ç
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å–∫–∞—á–∞–ª—Å—è
            if not temp_path.exists() or temp_path.stat().st_size == 0:
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª")
                return

            # –°–æ–∑–¥–∞–µ–º —Ü–µ–ª–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            target_dir = Path("data_files/file_export")
            target_dir.mkdir(parents=True, exist_ok=True)
            target_path = target_dir / "chat.html"

            # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
            import shutil
            shutil.copy2(temp_path, target_path)

            await message.answer("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")

            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ç–∞—Å–∫–µ —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å
            asyncio.create_task(process_chat_file(message, target_path))

        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if temp_path.exists():
                temp_path.unlink()

    except asyncio.TimeoutError:
        await message.answer("‚ùå –í—Ä–µ–º—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        print(f"Error handling HTML file: {e}")
    finally:
        await state.clear()


async def process_chat_file(message: Message, file_path: Path):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ç–∞—Å–∫–µ"""
    try:
        async with async_session_maker() as session:
            await main(session=session, file_path=str(file_path))
            await message.answer("‚úÖ –í—Å–µ —á–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!")
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–∞—Ç–æ–≤: {str(e)}"
        if len(error_msg) > 4000:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram
            error_msg = error_msg[:4000] + "..."
        await message.answer(error_msg)
        print(f"Error in main: {e}")


@export_router.message(ExportStates.waiting_for_html)
async def handle_wrong_content_type(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª chat.html –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç")