import asyncio
from sqlalchemy import text
from sqlalchemy.ext.asyncio import create_async_engine

# —Å—é–¥–∞ –ø–æ–¥—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π URL —Å ssl=require
DATABASE_URL = "postgresql+asyncpg://root:root@ai-edward0076.db-msk0.amvera.tech:5432/root?ssl=require"


async def clear_chats_table():
    """–û—á–∏—Å—Ç–∫–∞ —Ç–æ–ª—å–∫–æ —Ç–∞–±–ª–∏—Ü—ã chats"""
    engine = create_async_engine(
        DATABASE_URL,
        connect_args={"ssl": "require"},
        echo=True  # –≤–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    )

    async with engine.connect() as conn:
        try:
            # –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            await conn.begin()

            print("üöÄ –ù–∞—á–∏–Ω–∞—é –æ—á–∏—Å—Ç–∫—É —Ç–∞–±–ª–∏—Ü—ã chats...")

            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã chats
            result = await conn.execute(text("""
                SELECT table_schema, table_name
                FROM information_schema.tables
                WHERE table_name = 'chats'
                AND table_schema NOT IN ('pg_catalog', 'information_schema');
            """))

            chat_table = result.fetchone()

            if not chat_table:
                print("‚ùå –¢–∞–±–ª–∏—Ü–∞ 'chats' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
                return

            schema, table = chat_table
            print(f"üìã –ù–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞: {schema}.{table}")

            # 2. –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–∞–±–ª–∏—Ü—É chats
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º TRUNCATE –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –æ—á–∏—Å—Ç–∫–∏
                await conn.execute(text(f'TRUNCATE TABLE "{schema}"."{table}" RESTART IDENTITY CASCADE;'))
                print(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ {schema}.{table} —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞ (TRUNCATE)")
            except Exception as e:
                print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å TRUNCATE: {e}")
                # –ü—Ä–æ–±—É–µ–º DELETE –µ—Å–ª–∏ TRUNCATE –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
                try:
                    await conn.execute(text(f'DELETE FROM "{schema}"."{table}";'))
                    print(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ {schema}.{table} –æ—á–∏—â–µ–Ω–∞ (DELETE)")
                except Exception as e2:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É: {e2}")
                    raise

            # 3. –°–±—Ä–∞—Å—ã–≤–∞–µ–º sequence –¥–ª—è chats –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            try:
                await conn.execute(text(f'ALTER SEQUENCE IF EXISTS "{schema}".chats_id_seq RESTART WITH 1;'))
                print("‚úÖ Sequence —Å–±—Ä–æ—à–µ–Ω (–µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª)")
            except Exception as e:
                print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å sequence: {e}")

            # –ö–æ–º–º–∏—Ç–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            await conn.commit()
            print("üéâ –¢–∞–±–ª–∏—Ü–∞ chats –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–∞!")

        except Exception as e:
            # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            await conn.rollback()
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–∞–±–ª–∏—Ü—ã chats: {e}")
            raise

        finally:
            await conn.close()

    await engine.dispose()


async def check_chats_table():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã chats"""
    engine = create_async_engine(
        DATABASE_URL,
        connect_args={"ssl": "require"}
    )
    async with engine.connect() as conn:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        result = await conn.execute(text("""
            SELECT table_schema, table_name, table_type
            FROM information_schema.tables
            WHERE table_name = 'chats'
            AND table_schema NOT IN ('pg_catalog', 'information_schema');
        """))

        table_info = result.fetchone()
        if not table_info:
            print("‚ùå –¢–∞–±–ª–∏—Ü–∞ 'chats' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        schema, table, table_type = table_info
        print(f"üìã –¢–∞–±–ª–∏—Ü–∞ –Ω–∞–π–¥–µ–Ω–∞: {schema}.{table} ({table_type})")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        count_result = await conn.execute(text(f'SELECT COUNT(*) FROM "{schema}"."{table}";'))
        count = count_result.scalar()
        print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ chats: {count}")

    await engine.dispose()


async def delete_chats_by_ids():
    """–£–¥–∞–ª–µ–Ω–∏–µ —á–∞—Ç–æ–≤ –ø–æ ID (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ DAO)"""
    from app.database import async_session_maker
    from app.chat_gpt.dao import ChatDAO

    async with async_session_maker() as session:
        deleted_count = 0
        error_count = 0

        # –î–∏–∞–ø–∞–∑–æ–Ω ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
        for i in range(1, 1000):  # –£–≤–µ–ª–∏—á–∏–ª –¥–∏–∞–ø–∞–∑–æ–Ω –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
            try:
                result = await ChatDAO.delete(session, id=i)
                if result:
                    deleted_count += 1
                    print(f"‚úÖ –ß–∞—Ç —Å ID {i} —É–¥–∞–ª–µ–Ω")
                else:
                    # –ï—Å–ª–∏ —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                    pass

            except Exception as e:
                error_count += 1
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —á–∞—Ç–∞ {i}: {e}")

        try:
            await session.commit()
            print(f"üéâ –£–¥–∞–ª–µ–Ω–æ —á–∞—Ç–æ–≤: {deleted_count}, –æ—à–∏–±–æ–∫: {error_count}")
        except Exception as e:
            await session.rollback()
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–º–∏—Ç–∞: {e}")


if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(description="–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∞–±–ª–∏—Ü–µ–π chats")
    parser.add_argument('--action', choices=['check', 'clear', 'delete-ids', 'count'],
                        default='check',
                        help='–î–µ–π—Å—Ç–≤–∏–µ: check - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É, clear - –æ—á–∏—Å—Ç–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É, delete-ids - —É–¥–∞–ª–∏—Ç—å –ø–æ ID, count - –ø–æ—Å—á–∏—Ç–∞—Ç—å –∑–∞–ø–∏—Å–∏')

    args = parser.parse_args()

    if args.action == 'check':
        asyncio.run(check_chats_table())
    elif args.action == 'clear':
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
        confirm = input("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—Å—Ç–∏—Ç —Ç–∞–±–ª–∏—Ü—É chats! –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): ")
        if confirm.lower() == 'y':
            asyncio.run(clear_chats_table())
        else:
            print("‚ùå –û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    elif args.action == 'delete-ids':
        confirm = input("‚ö†Ô∏è  –£–¥–∞–ª–∏—Ç—å —á–∞—Ç—ã –ø–æ ID? (y/N): ")
        if confirm.lower() == 'y':
            asyncio.run(delete_chats_by_ids())
        else:
            print("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    elif args.action == 'count':
        asyncio.run(check_chats_table())