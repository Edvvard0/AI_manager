import json
import re
from datetime import date
from typing import Optional, List, Any

from openai import AsyncOpenAI
from sqlalchemy import select, and_
from sqlalchemy.orm import joinedload

from app.chat_gpt.dao import  MessageDAO
from app.chat_gpt.utils.promts import SYSTEM_PROMPT, SYSTEM_MD

from app.config import settings
from app.database import SessionDep
from app.tasks.dao import TaskDAO
from app.tasks.models import Task
from app.tasks.schemas import TaskCreate
from app.users.dao import UserDAO

client = AsyncOpenAI(api_key=settings.CHAT_GPT_API_KEY)


async def get_minutes_tasks(session: SessionDep):
    today = date.today()

    query = (
        select(Task)
        .where(
            and_(
                Task.tag == "–ø—è—Ç–∏–º–∏–Ω—É—Ç–∫–∞",
                Task.deadline_date <= today,
                Task.status != "–≥–æ—Ç–æ–≤–æ"
            )
        )
        .order_by(Task.deadline_date.asc())
    )

    result = await session.execute(query)
    tasks = result.scalars().all()

    print(tasks)
    if not tasks:
        return "–ó–∞–¥–∞—á —Å —Ç–µ–≥–æ–º '–ø—è—Ç–∏–º–∏–Ω—É—Ç–∫–∞' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

    summary = "\n".join(
        f"üìù {t.title} ‚Äî {t.status}\n"
        f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {t.description}\n"
        f"üìÖ –î–µ–¥–ª–∞–π–Ω: {t.deadline_date}\n"
        f"üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {t.executor.name if t.executor else '‚Äî'} "
        f"(@{t.executor.username if t.executor and t.executor.username else '‚Äî'})\n"
        for t in tasks
    )

    return f"üìå –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á —Å —Ç–µ–≥–æ–º '–ø—è—Ç–∏–º–∏–Ω—É—Ç–∫–∞':\n\n{summary}"


def check_keywords(text: str) -> Optional[str]:
    """–ù–∞–¥—ë–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –ø–æ —Ç–µ–∫—Å—Ç—É (—Ä–µ–≥–∏—Å—Ç—Ä/–ø—Ä–æ–±–µ–ª—ã –Ω–µ –≤–∞–∂–Ω—ã)."""
    t = re.sub(r"\s+", " ", (text or "")).strip().lower()
    if re.search(r"\b—Ä–∞—Å–ø—Ä–µ–¥–µ–ª(–∏|–∏—Ç—å)\s+–∑–∞–¥–∞—á[–∞—É–µ—ã]?\b", t) or "—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏ –∑–∞–¥–∞—á–∏" in t:
        return "distribute"
    if "—Å—Ç–∞—Ç—É—Å –ø–æ –≤—Å–µ–º –∑–∞–¥–∞—á–∞–º" in t:
        return "status_all"
    if "—Å—Ç–∞—Ç—É—Å –ø–æ –∑–∞–¥–∞—á–∞–º" in t:
        return "status"
    if "–Ω–∞—á–∞–ª–æ –ø—è—Ç–∏–º–∏–Ω—É—Ç–∫–∏" in t:
        return "minutes_start"
    return None


def extract_json_array(text: str) -> Optional[List[Any]]:
    """–ü—ã—Ç–∞–µ–º—Å—è –¥–æ—Å—Ç–∞—Ç—å JSON-–º–∞—Å—Å–∏–≤ –∏–∑ —Å—Ç—Ä–æ–∫–∏ (–≤ —Ç.—á. –∏–∑ ```json ...``` –±–ª–æ–∫–æ–≤)."""
    if not text:
        return None
    # 1) –∫–∞–∫ –µ—Å—Ç—å
    try:
        obj = json.loads(text)
        if isinstance(obj, list):
            return obj
    except Exception:
        pass
    # 2) –∏–∑ –∫–æ–¥-–±–ª–æ–∫–∞
    m = re.search(r"```(?:json)?\s*(\[[\s\S]*?\])\s*```", text, flags=re.IGNORECASE)
    if m:
        try:
            return json.loads(m.group(1))
        except Exception:
            pass
    # 3) –≥—Ä—É–±—ã–π –ø–æ–∏—Å–∫ –ø–µ—Ä–≤–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
    m2 = re.search(r"(\[[\s\S]*\])", text)
    if m2:
        try:
            return json.loads(m2.group(1))
        except Exception:
            pass
    # 4) –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π —Ö–∞–∫: —Å–∫–ª–µ–π–∫–∞ `}{` ‚Üí `},{`
    try:
        candidate = re.sub(r'}\s*{', '},{', text.strip())
        candidate = f"[{candidate}]"
        obj = json.loads(candidate)
        if isinstance(obj, list):
            return obj
    except Exception:
        pass
    return None


async def get_last_messages(session: SessionDep, chat_id: int):
    messages = await MessageDAO.get_history(session, chat_id)
    return  messages


async def get_worker_info(session: SessionDep):
    workers = await UserDAO.find_all(session, **{"is_admin": False})
    summary = "\n".join(f"–ò–º—è {w.name}, –û—Ç–¥–µ–ª {w.department},  Username: {w.username} ,  ID: {w.id}" for w in workers)
    # print(summary)
    return f"–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:\n{summary}"


async def get_tasks_info(session: SessionDep, project_id: int | None = None, only_active: bool = False) -> str:
    """
    –î–∞–π–¥–∂–µ—Å—Ç –∑–∞–¥–∞—á. –ï—Å–ª–∏ project_id=None ‚Äî –±–µ—Ä—ë–º –í–°–ï –∑–∞–¥–∞—á–∏.
    """
    q = select(Task).options(joinedload(Task.executor))
    if project_id:
        q = q.where(Task.project_id == project_id)

    tasks = (await session.execute(q)).scalars().all()
    if only_active:
        tasks = [t for t in tasks if (t.status or "").lower() not in {"–≥–æ—Ç–æ–≤–æ", "done", "closed"}]

    if not tasks:
        scope = f"–ø—Ä–æ–µ–∫—Ç–∞ {project_id}" if project_id else "–≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤"
        return f"–ó–∞–¥–∞—á –¥–ª—è {scope} –Ω–µ—Ç."

    summary = "\n".join(
        f"{t.title} ‚Äî {t.status or '‚Äî'} |\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {t.description or '‚Äî'}\n"
        f"–î–µ–¥–ª–∞–π–Ω: {t.deadline_date or '‚Äî'}\n"
        f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {t.executor.name if t.executor else '‚Äî'} "
        f"ID –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è: {t.executor.id if t.executor else '‚Äî'} "
        f"(@{t.executor.username if t.executor and t.executor.username else '‚Äî'})\n"
        for t in tasks
    )
    return f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∑–∞–¥–∞—á–∞–º (–ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏ —Ä–∞—Å–ø–∏—à–∏ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º):\n{summary}"


async def create_response_gpt(session: SessionDep, text: str, chat_id: int, project_id: int | None = None):
    """
    –í —Ä–µ–∂–∏–º–µ 'distribute' –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –í–°–ï–ì–î–ê JSON-–º–∞—Å—Å–∏–≤ –∑–∞–¥–∞—á (–∫–∞–∫ list[TaskCreate] –ø—Ä–∏ —É—Å–ø–µ—Ö–µ, –∏–Ω–∞—á–µ —Å—ã—Ä–æ–π list[dict]).
    –í –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ä–µ–∂–∏–º–∞—Ö ‚Äî –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç.
    """
    messages = await get_last_messages(session, chat_id)
    action = check_keywords(text)

    gpt_input = []
    instructions = ""

    if action == "distribute":
        # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç + –∂—ë—Å—Ç–∫–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –≤–µ—Ä–Ω—É—Ç—å JSON-–º–∞—Å—Å–∏–≤ –ë–ï–ó –ø–æ—è—Å–Ω–µ–Ω–∏–π
        sys = (
            f"{SYSTEM_PROMPT}\n\n"
            "–í–ù–ò–ú–ê–ù–ò–ï: –í–µ—Ä–Ω–∏ –°–¢–†–û–ì–û JSON-–º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –∑–∞–¥–∞—á –±–µ–∑ Markdown –∏ –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π. "
            "–ö–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º: title, description, deadline_date (YYYY-MM-DD), executor_id. "
            "–î–æ–ø—É—Å—Ç–∏–º—ã–µ –ø–æ–ª—è: status, comment, file_path, tag, project_id. "
            "–ï—Å–ª–∏ project_id –Ω–µ —É–∫–∞–∑–∞–Ω –≤–æ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –æ—Å—Ç–∞–≤—å –µ–≥–æ –ø—É—Å—Ç—ã–º (–∏–ª–∏ –Ω–µ –¥–æ–±–∞–≤–ª—è–π) ‚Äî —Å–µ—Ä–≤–µ—Ä –ø–æ–¥—Å—Ç–∞–≤–∏—Ç —Å–∞–º."
            "—Ç—ã –¥–æ–ª–∂–µ–Ω "
        )
        gpt_input = [{"role": "system", "content": sys}]
        instructions = sys

        # –ü–æ–¥–∫–ª–∞–¥—ã–≤–∞–µ–º –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ò –ó–∞–¥–∞—á–∏ (–ø–æ –ø—Ä–æ–µ–∫—Ç—É –∏–ª–∏ –≤—Å–µ)
        worker_info = await get_worker_info(session)
        tasks_info = await get_tasks_info(session, project_id=project_id, only_active=True)

        gpt_input.append({"role": "user", "content": worker_info})
        gpt_input.append({"role": "user", "content": tasks_info})

    elif action == "minutes_start":
        sys_minutes = (
            "–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –∫–æ—Ä–æ—Ç–∫–æ–π –ø–ª–∞–Ω—ë—Ä–∫–∏ (¬´–ø—è—Ç–∏–º–∏–Ω—É—Ç–∫–∏¬ª). "
            "–î–∞–π –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: "
            "–ø—É–Ω–∫—Ç–∞–º–∏: [–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å] ‚Äî –ó–∞–¥–∞—á–∞ ‚Äî –¥–µ–¥–ª–∞–π–Ω ‚Äî —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å. "
            "–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ, –∑–∞—Ç–µ–º –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, –∑–∞—Ç–µ–º –ø—Ä–æ—á–∏–µ. –ë–µ–∑ –ª–∏—à–Ω–∏—Ö –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π."
        )
        gpt_input = [{"role": "system", "content": sys_minutes}]
        minutes_tasks = await get_minutes_tasks(session)
        gpt_input.append({"role": "user", "content": minutes_tasks})
        gpt_input.append({"role": "user", "content": text})

    elif action == "status":
            task_info = await get_tasks_info(session, project_id=project_id)
            worker_info = await get_worker_info(session)
            gpt_input.append({"role": "user", "content": task_info})
            gpt_input.append({"role": "user", "content": worker_info})

    elif action == "status_all":
        sys_status_all = (
            "–ö—Ä–∞—Ç–∫–æ –æ—Ç–¥–∞–π —Å—Ç–∞—Ç—É—Å –ø–æ –≤—Å–µ–º –∑–∞–¥–∞—á–∞–º: —Å–≥—Ä—É–ø–ø–∏—Ä—É–π –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º, –æ—Ç–º–µ—Ç—å –ø—Ä–æ—Å—Ä–æ—á–∫–∏ –∏ –±–ª–∏–∑–∫–∏–µ –¥–µ–¥–ª–∞–π–Ω—ã."
        )
        gpt_input = [{"role": "system", "content": sys_status_all}]
        task_info = await get_tasks_info(session, project_id=None)
        worker_info = await get_worker_info(session)
        gpt_input.append({"role": "user", "content": task_info})
        gpt_input.append({"role": "user", "content": worker_info})
        gpt_input.append({"role": "user", "content": text})

    # –ò—Å—Ç–æ—Ä–∏—è ‚Üí —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
    for msg in messages:
        gpt_input.append({
            "role": "user" if msg.is_user else "assistant",
            "content": msg.content
        })
    gpt_input.append({"role": "user", "content": text})

    # –¥–ª—è –ù–ï distribute –¥–æ–±–∞–≤–∏–º SYSTEM_MD –≤ –∫–æ–Ω–µ—Ü –∫–∞–∫ —É —Ç–µ–±—è
    if action != "distribute":
        gpt_input.append({"role": "system", "content": SYSTEM_MD})

    # –í—ã–∑–æ–≤ (Responses API –±–µ–∑ response_format)
    resp = await client.responses.create(
        model=settings.CHAT_GPT_MODEL,
        input=gpt_input,
        instructions=instructions
    )

    if action == "distribute":
        # –°—Ç–∞–±–∏–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –º–∞—Å—Å–∏–≤–∞ –∑–∞–¥–∞—á
        txt = resp.output_text or ""
        tasks_data = extract_json_array(txt)

        if tasks_data is None:
            # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞: "}{"
            try:
                fixed = re.sub(r'}\s*{', '},{', txt.strip())
                tasks_data = json.loads(f"[{fixed}]")
            except Exception:
                tasks_data = None

        if tasks_data is None:
            # –ø—É—Å—Ç—å —Ä–æ—É—Ç —Ä–µ—à–∏—Ç –≤–µ—Ä–Ω—É—Ç—å 422
            return txt

        # –ø–æ–¥—Å—Ç–∞–≤–∏–º project_id (–º–æ–∂–µ—Ç –±—ã—Ç—å None ‚Äî —ç—Ç–æ –æ–∫; —Ç—ã —Ä–µ—à–∏—à—å –≤ —Å–ª–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è)
        enriched = []
        for t in tasks_data:
            if isinstance(t, dict) and "project_id" not in t:
                t = {**t, "project_id": project_id}
            enriched.append(t)

        # –ï—Å–ª–∏ –ø–æ–ª—É—á–∞–µ—Ç—Å—è ‚Äî –≤–∞–ª–∏–¥–∏—Ä—É–µ–º pydantic-–º–æ–¥–µ–ª—å—é
        try:
            tasks = [TaskCreate.model_validate(t) for t in enriched]
            return tasks
        except Exception:
            return enriched

    # –û–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç
    return resp.output_text
