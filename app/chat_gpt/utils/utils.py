import asyncio
import json
import re

import openai
from openai import AsyncOpenAI
from pyasn1_modules.rfc5990 import aes128_Wrap
from sqlalchemy import select
from sqlalchemy.orm import joinedload, selectinload

from app.bot.create_bot import send_task_user
from app.chat_gpt.dao import  MessageDAO
from app.chat_gpt.utils.promts import SYSTEM_PROMPT

from app.config import settings
from app.database import SessionDep, async_session_maker
from app.tasks.dao import TaskDAO
from app.tasks.models import Task
from app.tasks.schemas import TaskCreate
from app.users.dao import UserDAO

client = AsyncOpenAI(api_key=settings.CHAT_GPT_API_KEY)


# async def format_text(session: SessionDep, text: str):
#     # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è—Ö –∏–∑ –±–∞–∑—ã
#     tasks_db = await session.execute(
#         select(Task).options(selectinload(Task.executor))
#     )
#     tasks_db = tasks_db.scalars().all()
#
#     # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –ø–æ executor_id
#     executor_map = {
#         task.executor_id: task.executor for task in tasks_db if task.executor_id
#     }
#
#     # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ö–æ–¥–Ω–æ–π —Ç–µ–∫—Å—Ç –≤ JSON
#     text = re.sub(r'}\s*{', '},{', text.strip())
#     json_array_str = f"[{text}]"
#     tasks = json.loads(json_array_str)
#
#     # –ö–∞—Ä—Ç–∞ –∫–ª—é—á–µ–π –¥–ª—è Markdown
#     key_map = {
#         "title": "–ù–∞–∑–≤–∞–Ω–∏–µ",
#         "description": "–û–ø–∏—Å–∞–Ω–∏–µ",
#         "deadline_date": "–î–µ–¥–ª–∞–π–Ω",
#         "executor_id": "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å",
#         "status": "–°—Ç–∞—Ç—É—Å"
#     }
#
#     # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ Markdown
#     md_lines = []
#     for i, task in enumerate(tasks, start=1):
#         md_lines.append(f"### üìù –ó–∞–¥–∞—á–∞ {i}")
#         for key, value in task.items():
#             if key == "executor_id":
#                 executor = executor_map.get(value)
#                 executor_str = f"{executor.name if executor else '‚Äî'} ({executor.username if executor and executor.username else '‚Äî'})"
#                 md_lines.append(f"**{key_map.get(key, key)}:** {executor_str}")
#             else:
#                 md_lines.append(f"**{key_map.get(key, key)}:** {value}")
#         md_lines.append("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏
#
#     markdown_output = "\n".join(md_lines)
#     return markdown_output


async def check_keywords(session, text: str, chat_id: int):
    if "–†–ê–°–ü–†–ï–î–ï–õ–ò –ó–ê–î–ê–ß–ò" in text:
        return "distribute"
    elif "–°–¢–ê–¢–£–° –ü–û –ó–ê–î–ê–ß–ê–ú" in text:
        return "status"
    elif "–°–¢–ê–¢–£–° –ü–û –í–°–ï–ú –ó–ê–î–ê–ß–ê–ú" in text:
        return "status_all"
    else:
        return None


async def get_last_messages(session: SessionDep, chat_id: int):
    messages = await MessageDAO.get_history(session, chat_id)
    return  messages


async def get_worker_info(session: SessionDep):
    workers = await UserDAO.find_all(session, **{"is_admin": False})
    summary = "\n".join(f"–ò–º—è {w.name}, –û—Ç–¥–µ–ª {w.department},  Username: {w.username}" for w in workers)
    # print(summary)
    return f"–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:\n{summary}"


async def get_tasks_info(session: SessionDep, chat_id: int = 0):
    if chat_id:
        tasks = await session.execute(
            select(Task).options(joinedload(Task.executor))
            .where(Task.chat_id == chat_id)
        )
        tasks = tasks.scalars().all()
    else:
        tasks = await session.execute(
            select(Task).options(joinedload(Task.executor))
        )
        tasks = tasks.scalars().all()

    summary = "\n".join(
        f"{t.title} ‚Äî {t.status} | \n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {t.description} \n "
        f"–î–µ–¥–ª–∞–π–Ω: {t.deadline_date} \n"
        f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {t.executor.name if t.executor else '‚Äî'} \n"
        f"({t.executor.username if t.executor and t.executor.username else '‚Äî'})\n"
        for t in tasks
    )

    return f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∑–∞–¥–∞—á–∞–º –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏ –ø–æ–¥—Ä–æ–±–Ω–æ —Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –∫–∞–∂–¥—É—é –∑–∞–¥–∞—á—É:\n{summary}"


async def create_response_gpt(session: SessionDep, text: str, chat_id: int):
    messages = await get_last_messages(session, chat_id)
    instructions = ""

    gpt_input = []
    action = await check_keywords(session, text, chat_id)

    if action == "distribute":
        gpt_input = [{"role": "system", "content": SYSTEM_PROMPT}]
        instructions = SYSTEM_PROMPT

        worker_info = await get_worker_info(session)
        gpt_input.append({"role": "user", "content": worker_info})

    elif action == "status":
        task_info = await get_tasks_info(session, chat_id)
        worker_info = await get_worker_info(session)

        gpt_input.append({"role": "user", "content": task_info})
        gpt_input.append({"role": "user", "content": worker_info})


    elif action == "status_all":
        task_info = await get_tasks_info(session)
        worker_info = await get_worker_info(session)

        gpt_input.append({"role": "user", "content": task_info})
        gpt_input.append({"role": "user", "content": worker_info})

    for msg in messages:
        gpt_input.append({
            "role": "user" if msg.is_user else "assistant",
            "content": msg.content
        })

    gpt_input.append({"role": "user", "content": text})

    response = await client.responses.create(
        model=settings.CHAT_GPT_MODEL,
        input=gpt_input,
        instructions=instructions
    )

    if action == "distribute":
        try:
            output = re.sub(r'}\s*{', '},{', response.output_text.strip())
            output = f"[{output}]"

            tasks_data = json.loads(output)  # —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
            tasks = [TaskCreate.model_validate(t) for t in tasks_data]

            for task in tasks:
                print(task.title)
                # await TaskDAO.add(session, **task.model_dump())
                # await send_task_user(session, task)

            return tasks

        except Exception as e:
            print(f"[ERROR PARSING TASK] {e}")
            print(f"GPT output was:\n{response}")

            return  response.output_text

    print(response.output_text)
    return response.output_text
    # return "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏"


async def main():
    async with async_session_maker() as session:
        print(await check_keywords(session=session, text="–ó–ê–î–ê–ß–ò –ü–û –í–°–ï–ú –ü–†–û–ï–ö–¢–ê–ú", chat_id=1))

if __name__ == "__main__":
    # asyncio.run(create_response_gpt("—Ö—Ä–∞–Ω–∏—Ç –ª–∏ gpt –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ –µ—Å–ª–∏ —è –ø–æ–¥–∫–ª—é—á–∞—é—Å—å –ø–æ api. –∏ –∫–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å"))
    asyncio.run(main())
