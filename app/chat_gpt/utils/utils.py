import json
import re
from datetime import date

from openai import AsyncOpenAI
from sqlalchemy import select, and_
from sqlalchemy.orm import joinedload

from app.chat_gpt.dao import  MessageDAO
from app.chat_gpt.utils.promts import SYSTEM_PROMPT, SYSTEM_MD

from app.config import settings
from app.database import SessionDep
from app.tasks.dao import TaskDAO
from app.tasks.models import Task
from app.tasks.schemas import TaskCreate
from app.users.dao import UserDAO

client = AsyncOpenAI(api_key=settings.CHAT_GPT_API_KEY)


async def get_minutes_tasks(session: SessionDep):
    today = date.today()

    query = (
        select(Task)
        .where(
            and_(
                Task.tag == "–ø—è—Ç–∏–º–∏–Ω—É—Ç–∫–∞",
                Task.deadline_date <= today,
                Task.status != "–≥–æ—Ç–æ–≤–æ"
            )
        )
        .order_by(Task.deadline_date.asc())
    )

    result = await session.execute(query)
    tasks = result.scalars().all()

    # print(tasks)
    if not tasks:
        return "–ó–∞–¥–∞—á —Å —Ç–µ–≥–æ–º '–ø—è—Ç–∏–º–∏–Ω—É—Ç–∫–∞' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

    summary = "\n".join(
        f"üìù {t.title} ‚Äî {t.status}\n"
        f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {t.description}\n"
        f"üìÖ –î–µ–¥–ª–∞–π–Ω: {t.deadline_date}\n"
        f"üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {t.executor.name if t.executor else '‚Äî'} "
        f"(@{t.executor.username if t.executor and t.executor.username else '‚Äî'})\n"
        for t in tasks
    )

    return f"üìå –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á —Å —Ç–µ–≥–æ–º '–ø—è—Ç–∏–º–∏–Ω—É—Ç–∫–∞':\n\n{summary}"


def check_keywords(text: str):
    if "–†–ê–°–ü–†–ï–î–ï–õ–ò –ó–ê–î–ê–ß–ò" in text:
        return "distribute"
    elif "–°–¢–ê–¢–£–° –ü–û –ó–ê–î–ê–ß–ê–ú" in text:
        return "status"
    elif "–°–¢–ê–¢–£–° –ü–û –í–°–ï–ú –ó–ê–î–ê–ß–ê–ú" in text:
        return "status_all"
    elif "–ù–ê–ß–ê–õ–û –ü–Ø–¢–ò–ú–ò–ù–£–¢–ö–ò" in text:
        return "minutes_start"
    else:
        return None


async def get_last_messages(session: SessionDep, chat_id: int):
    messages = await MessageDAO.get_history(session, chat_id)
    return  messages


async def get_worker_info(session: SessionDep):
    workers = await UserDAO.find_all(session, **{"is_admin": False})
    summary = "\n".join(f"–ò–º—è {w.name}, –û—Ç–¥–µ–ª {w.department},  Username: {w.username}" for w in workers)
    # print(summary)
    return f"–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:\n{summary}"


async def get_tasks_info(session: SessionDep, chat_id: int = 0):
    if chat_id:
        tasks = await session.execute(
            select(Task).options(joinedload(Task.executor))
            .where(Task.chat_id == chat_id)
        )
        tasks = tasks.scalars().all()
    else:
        tasks = await session.execute(
            select(Task).options(joinedload(Task.executor))
        )
        tasks = tasks.scalars().all()

    summary = "\n".join(
        f"{t.title} ‚Äî {t.status} | \n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {t.description} \n "
        f"–î–µ–¥–ª–∞–π–Ω: {t.deadline_date} \n"
        f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {t.executor.name if t.executor else '‚Äî'} \n"
        f"({t.executor.username if t.executor and t.executor.username else '‚Äî'})\n"
        for t in tasks
    )

    return f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∑–∞–¥–∞—á–∞–º –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏ –ø–æ–¥—Ä–æ–±–Ω–æ —Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –∫–∞–∂–¥—É—é –∑–∞–¥–∞—á—É:\n{summary}"


async def create_response_gpt(session: SessionDep, text: str, chat_id: int):
    messages = await get_last_messages(session, chat_id)
    instructions = ""

    gpt_input = []
    action = check_keywords(text)

    if action == "distribute":
        gpt_input = [{"role": "system", "content": SYSTEM_PROMPT}]
        instructions = SYSTEM_PROMPT

        worker_info = await get_worker_info(session)
        gpt_input.append({"role": "user", "content": worker_info})

    elif action == "minutes_start":
        minutes_tasks = await get_minutes_tasks(session)
        gpt_input.append({"role": "user", "content": minutes_tasks})

    elif action == "status":
        task_info = await get_tasks_info(session, chat_id)
        worker_info = await get_worker_info(session)

        gpt_input.append({"role": "user", "content": task_info})
        gpt_input.append({"role": "user", "content": worker_info})


    elif action == "status_all":
        task_info = await get_tasks_info(session)
        worker_info = await get_worker_info(session)

        gpt_input.append({"role": "user", "content": task_info})
        gpt_input.append({"role": "user", "content": worker_info})

    for msg in messages:
        gpt_input.append({
            "role": "user" if msg.is_user else "assistant",
            "content": msg.content
        })

    gpt_input.append({"role": "user", "content": text})
    gpt_input.append( {"role": "system", "content": SYSTEM_MD})

    response = await client.responses.create(
        model=settings.CHAT_GPT_MODEL,
        input=gpt_input,
        instructions=instructions
    )

    if action == "distribute":
        try:
            output = re.sub(r'}\s*{', '},{', response.output_text.strip())
            output = f"[{output}]"

            tasks_data = json.loads(output)  # —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
            tasks = [TaskCreate.model_validate(t) for t in tasks_data]

            return tasks

        except Exception as e:
            print(f"[ERROR PARSING TASK] {e}")
            print(f"GPT output was:\n{response}")

            return  response.output_text
    return response.output_text
