from fastapi import APIRouter, UploadFile, File, Form, HTTPException
from fastapi.responses import JSONResponse
from pydantic import BaseModel
import openai
import os
import re
from io import BytesIO
from typing import List

from app.config import settings

openai.api_key = settings.CHAT_GPT_API_KEY

MINUTES_TRIGGER = "–ê–ù–ê–õ–ò–ó –ü–Ø–¢–ò–ú–ò–ù–£–¢–ö–ò"

# ==== –í—Å–ø–æ–º–æ–≥–∞–ª–∫–∏ ====

def _is_minutes_analysis(prompt: str) -> bool:
    return MINUTES_TRIGGER.casefold() in (prompt or "").casefold()

def _clip(text: str, limit: int = 12000) -> str:
    if text is None:
        return ""
    return text if len(text) <= limit else text[:limit] + "\n\n[...–æ–±—Ä–µ–∑–∞–Ω–æ –¥–ª—è –º–æ–¥–µ–ª–∏...]"

def build_minutes_messages(transcript_text: str) -> List[dict]:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∂—ë—Å—Ç–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å–±–æ—Ä–∫–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞.
    """
    clipped = _clip(transcript_text)

    system = (
        "–¢—ã ‚Äî —Å–µ–∫—Ä–µ—Ç–∞—Ä—å —Å–æ–≤–µ—â–∞–Ω–∏–π. –°–æ—Å—Ç–∞–≤–ª—è–µ—à—å –ø—Ä–æ—Ç–æ–∫–æ–ª ¬´–ü—è—Ç–∏–º–∏–Ω—É—Ç–∫–∏¬ª —Å—Ç—Ä–æ–≥–æ –ø–æ —à–∞–±–ª–æ–Ω—É.\n"
        "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n"
        "‚Ä¢ –í—Å–µ–≥–¥–∞ —Ç–µ –∂–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ —ç–º–æ–¥–∑–∏.\n"
        "‚Ä¢ –ù–∏–∫–∞–∫–∏—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π, –ø—Ä–µ–∞–º–±—É–ª –∏ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π ‚Äî —Ç–æ–ª—å–∫–æ –≥–æ—Ç–æ–≤—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª.\n"
        "‚Ä¢ –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö ‚Äî –ø–∏—à–∏ ¬´(—É—Ç–æ—á–Ω–∏—Ç—å)¬ª.\n"
        "‚Ä¢ –í –±–ª–æ–∫–µ ‚úÖ –∑–∞–¥–∞—á–∏ —Ä–∞—Å–ø–∏—Å—ã–≤–∞–π —Ç—Ä–µ–º—è –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏ –¥–∞—Ç/—Å—Ä–æ–∫–∞/–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ (üìÖ, ‚è≥, üë§) –¥–ª—è –ö–ê–ñ–î–û–ô –∑–∞–¥–∞—á–∏.\n"
        "‚Ä¢ –ë–µ–∑ –ø—É—Å—Ç—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ –∏ –±–µ–∑ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–¥–∞—á –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É.\n"
        "‚Ä¢ –Ø–∑—ã–∫ –æ—Ç–≤–µ—Ç–∞: —Ä—É—Å—Å–∫–∏–π.\n"
    )

    template = (
        "üìÑ –ü—Ä–æ—Ç–æ–∫–æ–ª ‚Ññ {{–Ω–æ–º–µ—Ä –∏–ª–∏ (—É—Ç–æ—á–Ω–∏—Ç—å)}}\n"
        "üìå –°–æ–≤–µ—â–∞–Ω–∏–µ ¬´–ü—è—Ç–∏–º–∏–Ω—É—Ç–∫–∞¬ª\n"
        "üìÖ {{–¥–∞—Ç–∞ –∏–∑ —Å—Ç–µ–Ω–æ–≥—Ä–∞–º–º—ã –∏–ª–∏ —Ç–µ–∫—É—â–∞—è}}\n"
        "üí¨ –†–µ–≥—É–ª—è—Ä–Ω–æ–µ —Å–æ–≤–µ—â–∞–Ω–∏–µ –ø–æ –±—É–¥–Ω—è–º\n\n"
        "‚∏ª\n\n"
        "üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏:\n"
        "{{–ø–æ –æ–¥–Ω–æ–º—É –≤ —Å—Ç—Ä–æ–∫–µ, ¬´üë§ –§–∞–º–∏–ª–∏—è –ò. –û.¬ª –∏–ª–∏ (—É—Ç–æ—á–Ω–∏—Ç—å)}}\n\n"
        "‚∏ª\n\n"
        "üìë –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n"
        " 1. {{...}}\n"
        " 2. {{...}}\n"
        " 3. {{...}}\n\n"
        "‚∏ª\n\n"
        "‚úÖ –†–µ—à–µ–Ω–∏—è (—Ñ–∏–∫—Å–∏—Ä—É—é—Ç—Å—è –∫–∞–∫ –∑–∞–¥–∞—á–∏):\n"
        " 1. {{–∫—Ä–∞—Ç–∫–æ–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ}}\n"
        "üìÖ {{–¥–∞—Ç–∞ —Å–æ–≤–µ—â–∞–Ω–∏—è}}\n"
        "‚è≥ {{–¥–µ–¥–ª–∞–π–Ω –∏–ª–∏ (—É—Ç–æ—á–Ω–∏—Ç—å)}}\n"
        "üë§ {{–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–ª–∏ (—É—Ç–æ—á–Ω–∏—Ç—å)}}\n"
        " 2. {{...}}\n"
        "üìÖ {{...}}\n"
        "‚è≥ {{...}}\n"
        "üë§ {{...}}\n"
    )

    user = (
        f"–°—Ç–µ–Ω–æ–≥—Ä–∞–º–º–∞ (–ø–æ—Å–ª–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏):\n\n{clipped}\n\n"
        f"–°–æ–±–µ—Ä–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª —Å—Ç—Ä–æ–≥–æ –ø–æ —à–∞–±–ª–æ–Ω—É –Ω–∏–∂–µ –∏ –≤–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –ø—Ä–æ—Ç–æ–∫–æ–ª –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:\n\n{template}"
    )

    return [
        {"role": "system", "content": system},
        {"role": "user", "content": user},
    ]

REQUIRED_BLOCKS = [
    r"^üìÑ –ü—Ä–æ—Ç–æ–∫–æ–ª ‚Ññ .+",
    r"^üìå –°–æ–≤–µ—â–∞–Ω–∏–µ ¬´–ü—è—Ç–∏–º–∏–Ω—É—Ç–∫–∞¬ª$",
    r"^üìÖ .+",
    r"^üí¨ –†–µ–≥—É–ª—è—Ä–Ω–æ–µ —Å–æ–≤–µ—â–∞–Ω–∏–µ –ø–æ –±—É–¥–Ω—è–º$",
    r"^‚∏ª$",
    r"^üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏:\s*(?:\nüë§ .+)+",
    r"^‚∏ª$",
    r"^üìë –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\s*(?:\n \d+\. .+)+",
    r"^‚∏ª$",
    r"^‚úÖ –†–µ—à–µ–Ω–∏—è \(—Ñ–∏–∫—Å–∏—Ä—É—é—Ç—Å—è –∫–∞–∫ –∑–∞–¥–∞—á–∏\):\s*(?:\n \d+\. .+\nüìÖ .+\n‚è≥ .+\nüë§ .+)+"
]

def validate_minutes(text: str) -> bool:
    flags = re.MULTILINE
    return all(re.search(p, text, flags) for p in REQUIRED_BLOCKS)

async def transcribe_audio(file: UploadFile) -> str:
    """
    –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ Whisper-1.
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø
    filename = file.filename or "audio"
    content_type = file.content_type or ""
    ext_ok = any(filename.lower().endswith(x) for x in [".mp3", ".wav", ".m4a", ".ogg"])
    type_ok = content_type.startswith("audio/")
    if not (ext_ok or type_ok):
        raise HTTPException(status_code=400, detail="–ü—Ä–∏—à–ª–∏—Ç–µ –∞—É–¥–∏–æ-—Ñ–∞–π–ª (mp3/wav/m4a/ogg).")

    raw = await file.read()
    if not raw:
        raise HTTPException(status_code=400, detail="–ü—É—Å—Ç–æ–π —Ñ–∞–π–ª.")

    bio = BytesIO(raw)
    bio.name = filename

    try:
        tr = openai.audio.transcriptions.create(
            model="whisper-1",
            file=bio
        )
        return tr.text or ""
    except Exception as e:
        raise HTTPException(status_code=502, detail=f"–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –∞—É–¥–∏–æ: {e}")

async def generate_protocol_from_transcript(transcript_text: str) -> str:
    """
    –°–±–æ—Ä–∫–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ GPT-4o –ø–æ –∂—ë—Å—Ç–∫–∏–º messages.
    """
    messages = build_minutes_messages(transcript_text)

    try:
        resp = await _run_chat(messages, temperature=0.1, max_tokens=1400)
        text = resp
        if not validate_minutes(text):
            # –û–¥–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–ø–æ—á–∏–Ω–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞
            fix_messages = [
                {"role": "system", "content": (
                    "–ò—Å–ø—Ä–∞–≤—å —Ñ–æ—Ä–º–∞—Ç —Ä–æ–≤–Ω–æ –ø–æ–¥ —à–∞–±–ª–æ–Ω –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ ¬´–ü—è—Ç–∏–º–∏–Ω—É—Ç–∫–∞¬ª. "
                    "–ù–∏–∫–∞–∫–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ ‚Äî —Ç–æ–ª—å–∫–æ –∫–æ–Ω–µ—á–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª. "
                    "–°–æ—Ö—Ä–∞–Ω–∏ –≤—Å–µ —ç–º–æ–¥–∑–∏ –∏ –±–ª–æ–∫–∏. –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç ‚Äî ¬´(—É—Ç–æ—á–Ω–∏—Ç—å)¬ª. "
                    "–ö–∞–∂–¥–∞—è –∑–∞–¥–∞—á–∞: —Ç—Ä–∏ —Å—Ç—Ä–æ–∫–∏ –¥–∞—Ç/—Å—Ä–æ–∫–∞/–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ (üìÖ, ‚è≥, üë§)."
                )},
                {"role": "user", "content": f"–í–æ—Ç —Ç–≤–æ–π –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ç–≤–µ—Ç, –ø—Ä–∏–≤–µ–¥–∏ –µ–≥–æ –∫ —Å—Ç—Ä–æ–≥–æ–º—É —à–∞–±–ª–æ–Ω—É:\n\n{text}"}
            ]
            text2 = await _run_chat(fix_messages, temperature=0.0, max_tokens=1400)
            if validate_minutes(text2):
                return text2
        return text
    except Exception as e:
        raise HTTPException(status_code=502, detail=f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞: {e}")

async def _run_chat(messages: List[dict], temperature: float, max_tokens: int) -> str:
    """
    –û–±—ë—Ä—Ç–∫–∞ –≤—ã–∑–æ–≤–∞ chat.completions (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ —Å –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–º —É —Ç–µ–±—è SDK).
    """
    resp = await _to_thread(
        openai.chat.completions.create,
        model="gpt-4o",
        messages=messages,
        temperature=temperature,
        max_tokens=max_tokens,
    )
    return resp.choices[0].message.content

# –ü—Ä–æ—Å—Ç–∞—è —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ CPU/IO-bound –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫
import asyncio
def _to_thread(func, *args, **kwargs):
    loop = asyncio.get_event_loop()
    return loop.run_in_executor(None, lambda: func(*args, **kwargs))